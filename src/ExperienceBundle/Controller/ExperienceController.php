<?php

namespace ExperienceBundle\Controller;

use AppBundle\Entity\CommExp;
use AppBundle\Entity\FollowedExp;
use AppBundle\Entity\Notification;
use AppBundle\Repository\AppRepository;
use Symfony\Component\HttpFoundation\JsonResponse;
use AppBundle\Entity\Experience;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;use Symfony\Component\HttpFoundation\Request;

/**
 * Experience controller.
 *
 * @Route("experience")
 */
class ExperienceController extends Controller
{

    /**
     * Lists all experience entities.
     *
     * @Route("/", name="experience_index")
     * @Method("GET")
     */
    public function indexAction(Request $request)
    {

        $em = $this->getDoctrine()->getManager();
        $securityContext = $this->container->get('security.authorization_checker');

        if ($securityContext->isGranted('IS_AUTHENTICATED_FULLY')){

        $user = $this->getUser()->getId();
        $follows = $em->getRepository('AppBundle:Experience')->findMyFollows($user);
        }
        else
        {
            $follows = null;
        }

        $experiences = $em->getRepository('AppBundle:Experience')->findAll();

        dump($follows);

        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $experiences, /* query NOT result */
            $request->query->getInt('page', 1), /*page number*/
            6 /*limit per page*/
        );

        return $this->render('@Experience/experience/index.html.twig', array('pagination' => $pagination,'followed' => $follows));
    }

    public function ExperienceBySeasonAction(Request $request,$Season)
    {
        $em = $this->getDoctrine()->getManager();
        $user = $this->getUser()->getId();

        $experiences = $em->getRepository('AppBundle:Experience')->findExperienceBySeason($Season);
        $follows = $em->getRepository('AppBundle:Experience')->findMyFollows($user);

        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $experiences, /* query NOT result */
            $request->query->getInt('page', 1), /*page number*/
            6 /*limit per page*/
        );

        return $this->render('@Experience/experience/index.html.twig', array('pagination' => $pagination,'followed' => $follows));
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function myExperienceAction(){

        $em = $this->getDoctrine()->getManager();
//        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $securityContext = $this->container->get('security.authorization_checker');

        if ($securityContext->isGranted('IS_AUTHENTICATED_FULLY')){

            $userId = $this->getUser()->getId();
            $experiences = $em->getRepository('AppBundle:Experience')->findMyFollows($userId);

            if($experiences == null){

                return $this->render('@Experience/experience/empty.html.twig');
            }
            else{
                return $this->render('@Experience/experience/myexperiences.html.twig', array(
                    'experiences' => $experiences,
                ));
            }
        }else {

            return $this->render('@Experience/experience/empty.html.twig');
        }
    }
    public function newAction(Request $request)
    {

        $securityContext = $this->container->get('security.authorization_checker');
        if ($securityContext->isGranted('IS_AUTHENTICATED_REMEMBERED')) {


        $experience = new Experience();
        $form = $this->createForm('ExperienceBundle\Form\ExperienceType', $experience);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            /** @var UploadedFile $file */
            $file = $experience->getimageFile();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            $experience->setimage($fileName);
            $experience->setIduser($this->getUser());

            $u = $this->getUser();
            // send this to all admins


            $notif = new  Notification();
            $notif->setSender($u->getId());
            $notif->setMessage($u." Ã  crÃ©er une nouvelle experience !");
            $notif->setReceiver(1);
            $em->persist($notif);


            $em->persist($experience);
            $em->flush();

            return $this->redirectToRoute('experience_show', array('idExperience' => $experience->getIdexperience()));
        }

        return $this->render('@Experience/experience/new.html.twig', array(
            'experience' => $experience,
            'form' => $form->createView(),
        ));
    }
    else{
        return $this->redirectToRoute('fos_user_security_login');
    }
    }

    /**
     *
     * @Route("/{idExperience}", name="experience_show")
     * @Method("GET")
     */
    public function showAction($idExperience, Request $request)
    {

        $em = $this->getDoctrine()->getManager();
        if($request->isXmlHttpRequest()){
            $experience = $em->getRepository("AppBundle:Experience")->findOneBy(array('idExperience' => $idExperience));
            dump($experience);
            $commExps = $em->getRepository('AppBundle:CommExp')->findBy(array('idExp' => $experience));


            return new JsonResponse(array('html' => $this->renderView('ExperienceBundle:experience:comment.html.twig', ['comments' => $commExps])));
        }
        else{
            $experience = $em->getRepository('AppBundle:Experience')->findOneBy(array('idExperience' => $idExperience));
            $commExps = $em->getRepository('AppBundle:CommExp')->findBy(array('idExp' => $experience->getIdExperience()));
            $reports = $em->getRepository('AppBundle:Reported')->findBy(array('experienceId' => $experience->getIdExperience()));
            dump($reports);
            return $this->render('ExperienceBundle:experience:show.html.twig'
                ,array('comments' => $commExps, 'experience' => $experience, 'reports' => $reports,));
        }
    }


    /**
     *
     * @Route("/add_comment", name="add_comment")
     * @Method("POST")
     */
    public function addCommentAction(Request $request)
    {
        $securityContext = $this->container->get('security.authorization_checker');
        if ($securityContext->isGranted('IS_AUTHENTICATED_REMEMBERED')) {
        $em = $this->getDoctrine()->getManager();
        if($request->isXmlHttpRequest()){
            $commentaire = new CommExp();
            $commentaire->setIdUser($this->getUser());
            $commentaire->setComment($request->get("comment"));
            $commentaire->setCommentDate(new \DateTime("now"));
            $exp = $em->getRepository("AppBundle:Experience")->findOneBy(array("idExperience" => $request->get("id_exp")));
            $commentaire->setIdExp($exp);
            dump($commentaire);
            $em->persist($commentaire);
            $em->flush();
            return new JsonResponse("true");
        }
        }
        else{
            return $this->redirectToRoute('fos_user_security_login');
        }

    }


    /**
     * Displays a form to edit an existing experience entity.
     *
     * @Route("/{idExperience}/edit", name="experience_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, Experience $experience)
    {
        $deleteForm = $this->createDeleteForm($experience);
        $editForm = $this->createForm('ExperienceBundle\Form\ExperienceType', $experience);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('experience_edit', array('idExperience' => $experience->getIdexperience()));
        }

        return $this->render('@Experience/experience/edit.html.twig', array(
            'experience' => $experience,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    public function deletingAction($idExperience)
    {

        $em = $this->getDoctrine()->getManager();
        $experience = $em->getRepository('AppBundle:Experience')->find( $idExperience);
        /*$comms = $em->getRepository('AppBundle:CommExp')->findBy(array('idExp' => $idExperience));
        dump($comms);
        foreach ($comms as $comm){
            $em->remove($comm);

        }*/
        $em->remove($experience);
        $em->flush();

        return $this->redirectToRoute('experience_index');
    }

    public function listbackAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();

        $experiences = $em->getRepository('AppBundle:Experience')->findAll();
        $notifs = $em->getRepository('AppBundle:Notification')->findAll();

        dump($notifs);
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $experiences, /* query NOT result */
            $request->query->getInt('page', 1), /*page number*/
            20 /*limit per page*/
        );

        return $this->render('@Experience/experience/index_back.html.twig', array('pagination' => $pagination, 'notifs' => $notifs));
    }

    public function followExpAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $uid = $this->getUser()->getId();
        dump($uid);
        if($request->isXmlHttpRequest()){
            $exp = $em->getRepository("AppBundle:Experience")->findOneBy(array("idExperience" => $request->get("id_exp")));
            $exp1 = $exp->getIdExperience();
            $followcheck = $em->getRepository('AppBundle:Experience')->findMyFollow($uid,$exp1);
            if($followcheck == null) {
                dump($followcheck);
                $follow = new FollowedExp();
                $follow->setIdUser($this->getUser());
                $follow->setIdExp($exp);
                dump($follow);
                $em->persist($follow);
                $em->flush();
                return new JsonResponse("true");
            }
            else{
                dump($followcheck);
                return new JsonResponse("false");

            }

        }
    }

    public function unfollowExpAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $uid = $this->getUser()->getId();
        dump($uid);
        if($request->isXmlHttpRequest()){
            $exp = $em->getRepository("AppBundle:Experience")->findOneBy(array("idExperience" => $request->get("id_exp")));
            $exp1 = $exp->getIdExperience();
            $followcheck = $em->getRepository('AppBundle:Experience')->findMyFollow($uid,$exp1);
            dump($followcheck);
            $entity =$em->getRepository('AppBundle:FollowedExp')->findOneBy(array('idFollow'=>$followcheck));
            dump($entity);
            if($entity == null) {
                return new JsonResponse("false");
            }
            else{

                $em->remove($entity);
                $em->flush();
                return new JsonResponse("true");

            }

        }
    }

    /**
     * Creates a form to delete a experience entity.
     *
     * @param Experience $experience The experience entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Experience $experience)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('experience_delete', array('idExperience' => $experience->getIdexperience())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
}
