{% extends 'base.html.twig' %}

{% block body %}







<h1>Public chat</h1>






<div>
    <section class="module">
        <header class="top-bar">

            <div class="left">
                <span class="icon typicons-message"></span>
                <h1>Chat Room</h1>
            </div>

            <div class="right">
                <span class="icon typicons-minus"></span>
                <span class="icon typicons-times"></span>
            </div>

        </header>
<ul class="discussion" id="chat-list"></ul>
    </section>
</div>
<hr>

 <center>
<textarea id="form-message" placeholder="Votre message ici"></textarea>
<input type="button" id="form-submit" value="Envoyer message"/>
 </center>
<input type="hidden" id="user-submit" value='{{ app.user.firstname }}'  />
<input type="hidden" id="photo-submit" value='{{ app.user.photoP }}'  />

<script>
    // s sockets:start-chat//

    // This object will be sent everytime you submit a message in the sendMessage function.
    var clientInformation = {
        username: new Date().getTime().toString() ,
        // You can add more information in a static object

    };

    // START SOCKET CONFIG
    /**
     * Note that you need to change the "sandbox" for the URL of your project.
     * According to the configuration in Sockets/Chat.php , change the port if you need to.
     * @type WebSocket
     */
    var conn = new WebSocket('ws://localhost:9090');

    conn.onopen = function(e) {
        console.info("Connection established succesfully");
    };

    conn.onmessage = function(e) {
        var data = JSON.parse(e.data);
        Chat.appendMessage(data.username, data.message);

        console.log(data);
    };

    conn.onerror = function(e){
        alert("Error: something went wrong with the socket.");
        console.error(e);
    };
    // END SOCKET CONFIG


    /// Some code to add the messages to the list element and the message submit.
    document.getElementById("form-submit").addEventListener("click",function(){
        var msg2 = document.getElementById("form-message").value;
        var msg1 = document.getElementById("user-submit").value
        var pic = document.getElementById("photo-submit").value
        var msg = msg1 +' : ' + msg2 ;
        if(!msg){
            alert("Please send something on the chat");
        }

        Chat.sendMessage(msg);
        // Empty text area
        document.getElementById("form-message").value = "";
    }, false);

    // Mini API to send a message with the socket and append a message in a UL element.
    var Chat = {
        appendMessage: function(username,message){
            var from;

            if(username !== clientInformation.username){
                from = "Vous";
            }else{
                from = clientInformation.username;
            }

            // Append List Item
            var ul = document.getElementById("chat-list");
            var li = document.createElement("li");
            li.className ="other" ;
            li.appendChild(document.createTextNode(message));
            var _img=document.createElement('img');
            _img.src="{{ asset("assets/images/users/"~pic ) }}"

            ul.appendChild(_img);

            ul.appendChild(li);

        },
        sendMessage: function(text){
            clientInformation.message =  text;
            // Send info as JSON
            conn.send(JSON.stringify(clientInformation));
            // Add my own message to the list
            this.appendMessage(clientInformation.username, clientInformation.message);
        }
    };


    function myFunction() {
        var x = document.getElementById("myDIV");
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    }





</script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <style>
        img {
            height: 70px;
            width: 90px ;
            background-color: #ff401a;
            border-radius: 50%;
        }



    </style>


    <style>
        @import url(http://weloveiconfonts.com/api/?family=typicons);
        [class*="typicons-"]:before {
            font-family: 'Typicons', sans-serif;
        }

        .module {
            width: 500px;
            margin: 50px auto;
        }

        .top-bar {
            background: #ffaf14;
            color: white;
            padding: 0.5rem;
            position: relative;
            overflow: hidden;
        }
        .top-bar h1 {
            display: inline;
            font-size: 1.1rem;
        }
        .top-bar .typicons-message {
            display: inline-block;
            padding: 4px 5px 2px 5px;
        }
        .top-bar .typicons-minus {
            position: relative;
            top: 3px;
        }
        .top-bar .left {
            float: left;
        }
        .top-bar .right {
            float: right;
            padding-top: 5px;
        }
        .top-bar > * {
            position: relative;
        }
        .top-bar::before {
            content: "";
            position: absolute;
            top: -100%;
            left: 0;
            right: 0;
            bottom: -100%;
            opacity: 0.25;
            background: radial-gradient(#ffffff, #ffd616);
            animation: pulse 1s ease alternate infinite;
        }

        .discussion {
            list-style: none;
            background: #fffdfa;
            margin: 0;
            padding: 0 0 50px 0;
        }
        .discussion li {
            padding: 0.5rem;
            overflow: hidden;
            display: flex;
        }
        .discussion .avatar {
            width: 40px;
            position: relative;
        }
        .discussion .avatar img {
            display: block;
            width: 100%;
        }

        .other .avatar:after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            width: 0;
            height: 0;
            border: 5px solid white;
            border-left-color: transparent;
            border-bottom-color: transparent;
        }

        .self {
            justify-content: flex-end;
            align-items: flex-end;
        }
        .self .messages {
            order: 1;
            border-bottom-right-radius: 0;
        }
        .self .avatar {
            order: 2;
        }
        .self .avatar:after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            width: 0;
            height: 0;
            border: 5px solid white;
            border-right-color: transparent;
            border-top-color: transparent;
            box-shadow: 1px 1px 2px rgba(188, 66, 86, 0.2);
        }

        .messages {
            background: white;
            padding: 10px;
            border-radius: 2px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }
        .messages p {
            font-size: 0.8rem;
            margin: 0 0 0.2rem 0;
        }
        .messages time {
            font-size: 0.7rem;
            color: #ffaf14;
        }

        @keyframes pulse {
            from {
                opacity: 0;
            }
            to {
                opacity: 0.5;
            }
        }
    </style>


{%  endblock %}